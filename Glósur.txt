Glósur

* ios og android möppurnar eru til að keyra upp á sitthvoru platforminu. Mun líklegast aldrei koma við það nema það sé eitthvað low level stuff.
* node_modules mappan inniheldur öll dependencies sem er verið að nota í projectinu.
* index.android.js og ios.js eru þær sem er aðallega notað
	entry point fyrir applcation
	þetta er það sem ræsist fyrst fyrir það platform sem er að keyra. Eins og App delegate eða main.
	byrja eins þegar project er búið til en breytast svo smám sama

* component : object/eitthvað sem verður rendarað á skjáinn.
	buinn til með því að skrifa javaskript function
	const App = () => {
  		// þetta er component sem heitir App
	}
	einn component per file. Til að búa til annan component þa´er best practise að gera nýjan file.
	- Eingngu rót component notar app AppRegistry og eina skiptið sem það er notað. App er því rótar componentinn. Restin eru child. Öll önnur component (child) eru exportuð.
	Export statements eru að gera componentin aðgengileg í öðrum componentum.
	- comonrnt nesting: með því að nota allskonar comonent saman til að búa til component.
		T.d. Header er nestaður í App component.
		import Header from './src/components/header' <- þetta imprtar Header.js skránni í tiltekna skrá með því að vísa í skránna.
							source directory = ./
	Nota component sem er skilgreindur í annarri skrá t.d. Header.js í index.ios.js þá er Header componentið sett inn í App componentið:
		const App = () => (
		  //Það er tómt og má því ritast sem self closing
		  <Header />
		);


* JSX : Syntax er jsx sem er extension to write react compontes. notar sama syntax og html. eina leiðin til að comunicate to react native sem renderast á skjá.
Notað sem maski ofan á javascript component syntaxinn til að auðvelda að geta skrifað .. verður til nested function calls sem er mun lengra og erfiðara að skrifa.
	Til dæmis: Skrifa / Render text á skjáinn með því að láta component return <Text>Some text..</Text>
	verður að React.createElement(
		Text,
		null,
		"Some text.."
	);
	Notar HTML syntax.
	babeljs.io er síða sem hægt er að nota til að converta jsx to compiled javascript > try it out
	// Component
	const App = () => {
  		return (
    	 	 <Text> Some Text </Text>
  		);
	};

	// refactor with more clean syntax
	const App = () => (
	  <Text>Some text</Text>
	);

* import :
	react : hvernig component a að haga sér, hvernig á að díla við fullt af compontes og hvernig þeir vinna saman.
	react-native : portal to a mobile device. Veit Hvernig á að taka output á compontent og hvernig á að birta hann.

	Þarf að importa öllu Text og þess háttar libraries til þess að geta notað þau úr reactNative libraryinu.
	með því að import {Text} from 'react-native' er bara verið að sækja Text úr react native til að nota í stað alls draslisins.

	Ekki til neinar global breytur. Það þarf að importa öllu

	import fer beint og leitar í module directoryinu (node_modules) og ath hvort það sé þar t.d. react. Þetta er unique strengir en ef þetta eru js skrár sem við skrifum sjálf þá þarf að gera pathið. ./src/...

* Card
	einskonar view í ios. sem inniheldur allskonar compontents og dót.

* Styling
	* Ekki mikið af tólum fyrir að sjá um styling. Það þarf að gera allt styling sjálf, by hand.
	í stað þess að gera sér css skrá þá er all útlit ´i component file. Með því að búa til nýtt object ekki component samt. Svipað og css.
		const styles = {
			textStyle: {
				fontSize : 20;
			}
		};
	Ég get þa´notað þetta style í componentinum mínum.
	//Passa að það sé ekki bil á milli = í style
	const Header = () => {
		const { textStyle } = styles;

		<Text style={textStyle}>Albums!</Text>;
	};
	* það má líka nota styles.viewStyles
	* Reglur:
		þegar maður vill færa til hlutina á skjánum, t.d. texta þá er betra að nota View.
		View er notað til að style and position hluti sem tilheyra því viewi á skjánum.
	* Shadowing er sniðugt að nota til að gera border, setur eins og skugga undir viewið.
		shadowColor: '#000'
		shadowOffset: {width: 0 height: 2} hversu langt skugginn á að teygja sig, þessu tilfelli ekkert til hliðanna en uppi og niðri. Þar sem Headerinn er efstur þá teygir hann sig ekkert útfyrir efst.
		shadowOpacity: 0.2 hversu see through hann er eins og alpha.
* Flexbox
	hvernig á að staðsetja elements. Svipað og CSS.
	system of positioning elements in a container. t.d. hvenrig við viljum staðsetja texta í view.
	allt er upphalfega staðsett eins og í html efst í horni vinstra megin.
	property:
		* justifyContent: 'flex-end'
			justifyContent = færir hlutina í vertical áttir. upp eða niður. Gerir meira en þetta er svona megin aðgerðin
				felx-end = ýtir því neðst niður í containerinn sem það er í
				center = setur í miðjuna á containerinum
				flex-start = fer efst
				...
		* alignItems : 'flex-start'
			alignItems = færir hlutina í horizontal áttir. til hliðar. Gerir meira en þetta er svona megin aðgerðin
				flex-start = setur lengst til vinstri í containernum
				flex-end = setur lengst til hægri í containernum
				center = setur í miðjuna á containernum

* Breyta texta eftir því hvaða content er í gangi
	Þegar við viljum breyta einhverri breytu eða component eftir því sem verið er að birta á skjánum (t.d. header)
	þá er notað property (í stað þess að það sé gert í componentinu sem verið að er að nota (child)).
	þarf fyrst að skilgreina propertyin sem á að geta breyst í frá parentinu. meðan childið fær prop object sem parentið providar contentið í.
		t.d. í Header.js
			const Header = (props) => { // Props er javascript object, alltaf þegar maður gerir reference í JS í JSX þá þarf að gera {} utan um það.
				<Text style={textStyle}> {props.headerText} </Text>
			}
		App getur þá kallað með <Header headerText={'Albums!'} />

* Búa til http request til að sækja plöturnar frá api á vefslóð frá kennaranum.
	functional component: notað til að presenta gögn en getur ekki höndlað að sækja gögn. Inniheldur alltaf jsx að hluta t.d. <Text> some text..</Text>
	Meira eins og pípa af gögnum sem fer inn og jsx fer út.
	class based component: notað til að sækja gögn og getur höndlað gögn sem breytast, t.d fetch data, user events ofl. veit þegar það verður renderað á skjá sem er hentugt fyrir data fetching.
		þett er byggt á ES6. í raun eins og að búa til functional component og fiffa hann til svo hann verði class based. T.d. AlbumsList klasinn í verkefninu.
		Dæmi:
			class Header extends Component{
				render(){
				return <Text>..</Text>
				}
			}
			//Þarf að importa Component
			// þarf alltaf að útfæra renderfallið þegar átt er við class
			// þegar kallað er á Album list þá mun þetta render fall keyra til að birta á skjá
			class AlbumList extends Components {
			  render() {
			    return (
			      <View>
			        <Text>Album List!!!</Text>
			      </View>
			    );
			  } //notar ekki semikommu í class
			}
			live cycle methods: þetta bjargar því að class objectið sem er búið til er renderað miðað við það render fall sem það þarf að útfæra.
			alltaf þegar object á að vera rendered þá er automatic kallað í fallið comonentwillmount sem er hægt að útfæra og láta gera ýmislegt, t.d eitthvað sem þarf að gerast áður. eins og willapear
			
Þú ert í lecture 7 -
